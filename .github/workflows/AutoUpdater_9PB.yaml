name: Update VPN Subscription (SUB_9PB)

on:
  schedule:
    - cron: '0 */4 * * *' # every 4 hours
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Set true to run without committing'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install axios js-yaml

      - name: Run AutoUpdater Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SUB_9PB: ${{ secrets.SUB_9PB }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          node <<'JS'
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          const yaml = require('js-yaml');

          const dry_run = process.env.DRY_RUN === 'true';
          const subUrl = process.env.SUB_9PB;

          // keep the original fetch and base64 decode behavior as in your script1
          const fetchSub = async () => {
            const res = await axios.get(subUrl);
            return Buffer.from(res.data, 'base64').toString();
          };

          // --- Advanced parsing functions merged/adapted from script 2 ---
          function safeNumber(v, fallback = 0) {
            const n = Number(v);
            return Number.isFinite(n) ? n : fallback;
          }

          function b64decode(s) {
            if (!s) return '';
            if (s.length % 4) s += '='.repeat(4 - (s.length % 4));
            return Buffer.from(s, 'base64').toString('utf8');
          }

          function parseVmess(line) {
            try {
              const raw = line.slice(8);
              const confJson = b64decode(raw);
              const conf = JSON.parse(confJson);
              const net = (conf.net || 'tcp').toLowerCase();
              const tls = (conf.tls || '').toLowerCase() === 'tls';

              const proxy = {
                name: conf.ps || 'vmess',
                type: 'vmess',
                server: conf.add || '',
                port: safeNumber(conf.port, 0),
                uuid: conf.id || '',
                alterId: safeNumber(conf.aid || conf.alterId || 0, 0),
                cipher: conf.type || 'auto',
                network: net,
                wsPath: conf.path || '',
                tls: tls,
                sni: conf.sni || (conf.servername || '') || ''
              };

              // ws-specific extra fields (keep names compatible with your first script style)
              if (net === 'ws') {
                proxy.wsPath = conf.path || '';
                // keep simple header host field if provided
                if (conf.host) proxy.host = conf.host;
              }

              // grpc hint
              if (net === 'grpc') {
                proxy.grpcServiceName = conf.path || '';
              }

              return proxy;
            } catch (err) {
              return null;
            }
          }

          function parseVless(line) {
            try {
              // original script1 did: const [before, after] = line.slice(7).split('#');
              const [before, after] = line.slice(7).split('#');
              const url = new URL(before);
              const q = Object.fromEntries(url.searchParams.entries());
              const net = (q.type || q.transport || 'tcp').toLowerCase();
              const tls = (q.security || '').toLowerCase() === 'tls';

              const proxy = {
                name: decodeURIComponent(after || '') || 'vless',
                type: 'vless',
                server: url.hostname || '',
                port: safeNumber(url.port || q.port || 0, 0),
                uuid: decodeURIComponent(url.username || '') || '',
                network: net,
                wsPath: q.path || '',
                tls: tls,
                sni: q.sni || ''
              };

              // ws extras
              if (net === 'ws') {
                proxy.wsPath = q.path || '';
                if (q.host) proxy.host = q.host;
              }
              if (net === 'grpc') {
                proxy.grpcServiceName = q.serviceName || q['service-name'] || q.service || '';
              }

              return proxy;
            } catch (err) {
              return null;
            }
          }

          function parseTrojan(line) {
            try {
              const [before, after] = line.slice(9).split('#');
              const url = new URL(`trojan://${before}`);
              const q = Object.fromEntries(url.searchParams.entries());
              const net = (q.type || q.transport || 'tcp').toLowerCase();
              const tls = (q.security || '').toLowerCase() === 'tls';

              const proxy = {
                name: decodeURIComponent(after || '') || 'trojan',
                type: 'trojan',
                server: url.hostname || '',
                port: safeNumber(url.port || q.port || 0, 0),
                password: url.username || '',
                sni: q.sni || '',
                tls: tls,
                network: net
              };

              if (net === 'ws') {
                proxy.wsPath = q.path || '';
                if (q.host) proxy.host = q.host;
              }
              if (net === 'grpc') {
                proxy.grpcServiceName = q.serviceName || q['service-name'] || '';
              }

              return proxy;
            } catch (err) {
              return null;
            }
          }

          function parseHysteria2(line) {
            try {
              // script2 used new URL(link) directly for hysteria2
              const u = new URL(line);
              const name = decodeURIComponent(u.hash ? u.hash.slice(1) : '') || 'hysteria2';
              return {
                name,
                type: 'hysteria2',
                server: u.hostname || '',
                port: safeNumber(u.port || 0, 0),
                password: decodeURIComponent(u.username || '') || '',
                udp: u.searchParams.get('udp') === 'true',
                sni: u.searchParams.get('sni') || '',
                "skip-cert-verify": u.searchParams.get('skip-cert-verify') === 'true'
              };
            } catch (err) {
              return null;
            }
          }

          function parseAnytls(line) {
            try {
              const u = new URL(line);
              const name = decodeURIComponent(u.hash ? u.hash.slice(1) : '') || 'anytls';
              return {
                name,
                type: 'anytls',
                server: u.hostname || '',
                port: safeNumber(u.port || 0, 0),
                password: decodeURIComponent(u.username || '') || '',
                udp: u.searchParams.get('udp') === 'true',
                sni: u.searchParams.get('sni') || '',
                "skip-cert-verify": u.searchParams.get('skip-cert-verify') === 'true'
              };
            } catch (err) {
              return null;
            }
          }

          // --- End advanced parsers ---

          const generate9PB = async () => {
            const rawData = await fetchSub();
            // preserve original behavior: remove first two info lines
            const lines = rawData.split('\n').slice(2);
            const proxies = [];

            for (let line of lines) {
              line = line.trim();
              if (!line) continue;

              try {
                if (line.startsWith('vmess://')) {
                  const p = parseVmess(line);
                  if (p) proxies.push(p);
                }
                else if (line.startsWith('vless://')) {
                  const p = parseVless(line);
                  if (p) proxies.push(p);
                }
                else if (line.startsWith('trojan://')) {
                  const p = parseTrojan(line);
                  if (p) proxies.push(p);
                }
                else if (line.startsWith('hysteria2://')) {
                  const p = parseHysteria2(line);
                  if (p) proxies.push(p);
                }
                else if (line.startsWith('anytls://')) {
                  const p = parseAnytls(line);
                  if (p) proxies.push(p);
                }
                // keep silent on unsupported lines (like plain YAML blocks or other schemes)
              } catch (err) {
                console.error('Failed to parse line:', line, err);
              }
            }

            // preserve original output behavior: use your template and replace placeholders the same way
            const template = fs.readFileSync(path.join(__dirname, 'ClashTemplate.ini'), 'utf-8');

            const proxies_yaml_block = yaml.dump(proxies);
            const proxy_names_block = proxies.map(p => p.name).join('\n');

            const outputContent = template
              .replace('{{PROXIES}}', proxies_yaml_block)
              .replace('{{PROXY_NAMES}}', proxy_names_block);

            fs.writeFileSync('9PB', outputContent);
            fs.writeFileSync('9PB.yml', proxies_yaml_block);
            
            if (!dry_run) {
              // Update GitHub file
              const ghUrl = `https://api.github.com/repos/${githubRepo}/contents/9PB`;
              try {
                const ghRes = await axios.get(ghUrl, {
                  headers: { Authorization: `token ${githubToken}`, 'User-Agent': 'github-action' }
                });
                const sha = ghRes.data.sha;
                await axios.put(ghUrl, {
                  message: `Auto update 9PB ${new Date().toISOString()}`,
                  content: Buffer.from(outputContent, 'utf8').toString('base64'),
                  sha
                }, {
                  headers: { Authorization: `token ${githubToken}`, 'User-Agent': 'github-action' }
                });
                console.log('✅ GitHub updated successfully');
              } catch (e) {
                console.error('⚠️ Failed to update GitHub:', e && e.message ? e.message : e);
              }

              // Upload to Textdb using application/x-www-form-urlencoded
              const textdbUrl = 'https://textdb.online/update/?key=9PB_SHFX';
              try {
                const params = new URLSearchParams({ value: outputContent }).toString();
                const res = await axios.post(textdbUrl, params, {
                  headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
                });
                if (res.data && res.data.status === 1) {
                  console.log('✅ Textdb uploaded successfully: ' + (res.data.data && res.data.data.url ? res.data.data.url : 'no-url'));
                } else {
                  console.error('❌ Textdb upload failed:', res.data);
                }
              } catch (err) {
                console.error('⚠️ Error uploading to Textdb:', err && err.message ? err.message : err);
              }
            } else {
              console.log('⚠️ Dry run enabled — YAML generated but not pushed.');
            }
          }

          generate9PB().catch(err => {
            console.error('❌ Fatal error:', err && err.message ? err.message : err);
            process.exit(1);
          });
          JS

      - name: Upload 9PB artifact
        uses: actions/upload-artifact@v4
        with:
          name: 9PB
          path: 9PB.yml

      - name: Cleanup old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            // Filter artifacts named '9PB' and sort by created_at descending (newest first)
            const items = (artifacts.data.artifacts || [])
              .filter(a => a.name === '9PB')
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            // Keep the latest 2, delete the rest
            const toDelete = items.slice(2);
            for (const art of toDelete) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: art.id
              });
              core.info(`Deleted old artifact id=${art.id} created_at=${art.created_at}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
