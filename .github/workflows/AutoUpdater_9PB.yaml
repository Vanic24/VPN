name: Update VPN Subscription (SUB_9PB)

on:
  schedule:
    - cron: '0 */6 * * *' # every 6 hours
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Set true to run without committing'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install axios js-yaml

      - name: Run AutoUpdater Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SUB_9PB: ${{ secrets.SUB_9PB }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          node <<'JS'
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          const yaml = require('js-yaml');

          const dry_run = process.env.DRY_RUN === 'true';
          const subUrl = process.env.SUB_9PB;

          // Fetch subscription content
          const fetchSub = async () => {
            const res = await axios.get(subUrl);
            return Buffer.from(res.data, 'base64').toString();
          };

          const generate9PB = async () => {
            const rawData = await fetchSub();
            const lines = rawData.split('\n').slice(2); // skip first 2 lines
            const proxies = [];

            // parse proxies
            for (let line of lines) {
              line = line.trim();
              if (!line) continue;

              try {
                if (line.startsWith('vmess://')) {
                  const data = JSON.parse(Buffer.from(line.slice(8), 'base64').toString());
                  proxies.push({
                    name: data.ps || 'vmess',
                    type: 'vmess',
                    server: data.add,
                    port: parseInt(data.port),
                    uuid: data.id,
                    alterId: 0,
                    cipher: data.type || 'auto',
                    network: data.net,
                    wsPath: data.path || '',
                    tls: data.tls === 'tls',
                    sni: data.sni || ''
                  });
                }
                else if (line.startsWith('vless://')) {
                  const [before, after] = line.slice(7).split('#');
                  const url = new URL(before);
                  proxies.push({
                    name: decodeURIComponent(after) || 'vless',
                    type: 'vless',
                    server: url.hostname,
                    port: parseInt(url.port),
                    uuid: url.username,
                    network: url.searchParams.get('type') || 'tcp',
                    wsPath: url.searchParams.get('path') || '',
                    tls: url.searchParams.get('security') === 'tls',
                    sni: url.searchParams.get('sni') || ''
                  });
                }
                else if (line.startsWith('trojan://')) {
                  const [before, after] = line.slice(9).split('#');
                  const url = new URL(`trojan://${before}`);
                  proxies.push({
                    name: decodeURIComponent(after) || 'trojan',
                    type: 'trojan',
                    server: url.hostname,
                    port: parseInt(url.port),
                    password: url.username,
                    sni: url.searchParams.get('sni') || ''
                  });
                }
                else if (line.startsWith('hysteria2://')) {
                  proxies.push({
                    name: line,
                    type: 'hysteria2',
                    server: line,
                    port: 0
                  });
                }
                else if (line.startsWith('anytls://')) {
                  proxies.push({
                    name: line,
                    type: 'anytls',
                    server: line,
                    port: 0
                  });
                }
              } catch (err) {
                console.error('Failed to parse line:', line, err);
              }
            }

            // read template
            const template = fs.readFileSync(path.join(__dirname, 'ClashTemplate.ini'), 'utf-8');

            const proxies_yaml_block = yaml.dump(proxies);
            const proxy_names_block = proxies.map(p => p.name).join('\n');

            const outputContent = template
              .replace('{{PROXIES}}', proxies_yaml_block)
              .replace('{{PROXY_NAMES}}', proxy_names_block);

            fs.writeFileSync('9PB', outputContent);
            fs.writeFileSync('9PB.yml', proxies_yaml_block);

            if (!dry_run) {
              // update GitHub
              const ghUrl = `https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/contents/9PB`;
              const ghRes = await axios.get(ghUrl, {
                headers: { Authorization: `token ${process.env.GITHUB_TOKEN}` }
              });
              const sha = ghRes.data.sha;

              await axios.put(ghUrl, {
                message: `Auto update 9PB ${new Date().toISOString()}`,
                content: Buffer.from(outputContent).toString('base64'),
                sha
              }, {
                headers: { Authorization: `token ${process.env.GITHUB_TOKEN}` }
              });
              console.log('✅ GitHub updated successfully');

              // update TextDB using POST (fix for ERR_BAD_REQUEST)
              await axios.post(
                'https://textdb.online/update/',
                new URLSearchParams({
                  key: '9PB_SHFX',
                  value: JSON.stringify(outputContent)
              }).toString(),
              { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
            );
            console.log('✅ TextDB uploaded successfully');
            }
          };

          generate9PB().catch(err => {
            console.error(err);
            process.exit(1);
          });
          JS

      - name: Upload 9PB artifact
        uses: actions/upload-artifact@v4
        with:
          name: 9PB
          path: 9PB.yml

      - name: Cleanup old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            for (const artifact of artifacts.data.artifacts.filter(a => a.name === '9PB').slice(2)) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
