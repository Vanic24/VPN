name: Update VPN Subscription (SUB_Sub3)

on:
  schedule:
    - cron: "0 */3 * * *" # Runs every 3 hours
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'If true, only generate YAML locally without pushing'
        required: false
        default: 'false'

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make cmake g++ pkg-config libssl-dev

      - name: Clone SubConverter
        run: |
          git clone https://github.com/MetaCubeX/subconverter.git
          cd subconverter
          go build -o subconverter

      - name: Generate Clash YAML with SubConverter
        run: |
          cd subconverter
          # Create config.yaml dynamically using SUB_3 secret
          echo "general:\n  loglevel: info\nsubscription:\n  - name: SUB3\n    type: url\n    url: '${{ secrets.SUB_3 }}'\n    path: '../Sub3.yml'\noutput:\n  format: clash\n  path: '../Sub3.yml'" > config.yaml
          ./subconverter -c config.yaml
        env:
          SUB_3: ${{ secrets.SUB_3 }}

      - name: Commit and push updated YAML
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add Sub3.yml
          git commit -m "Auto Updated Sub3 via SubConverter at $(date -u)"
          git push
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Clash YAML artifact
        uses: actions/upload-artifact@v4
        with:
          name: Sub3
          path: Sub3.yml

      - name: Delete old artifacts (keep latest 2 only)
        run: |
          echo "üîç Checking for old artifacts..."
          artifact_ids=$(gh api repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.name=="Sub3") | .id')
          keep_ids=$(echo "$artifact_ids" | head -n 2)
          delete_ids=$(echo "$artifact_ids" | tail -n +3)
          if [ -z "$delete_ids" ]; then
            echo "‚úÖ No old artifacts to delete."
          else
            for id in $delete_ids; do
              gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$id
              echo "üóë Deleted old artifact $id"
            done
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
