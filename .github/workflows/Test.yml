name: Fetch & Process Nodes

on:
  workflow_dispatch:

jobs:
  process_nodes:
    runs-on: windows-latest
    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Download latest Karing Windows portable ZIP automatically
      - name: Download latest Karing Windows portable
        run: |
          echo "Fetching latest Karing Windows portable..."
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/KaringX/karing/releases/latest"
          $asset = $release.assets | Where-Object { $_.name -match "windows_x64.zip" } | Select-Object -First 1
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile karing.zip
          Expand-Archive -Path karing.zip -DestinationPath karing -Force
          dir karing
          echo "Karing extracted. Checking version..."
          .\karing\karing.exe --version

      # 3Ô∏è‚É£ Fetch subscription from secret
      - name: Fetch subscription
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "${{ secrets.TEST_URL }}" -OutFile subscription.txt
          Write-Output "Fetched subscription. Preview first 5 lines:"
          Get-Content subscription.txt -TotalCount 5

      # 4Ô∏è‚É£ Let Karing parse nodes & run latency check with outbound IP
      - name: Karing parse + latency + resolve outbound
        run: |
          echo "Running Karing parser and latency check..."
          .\karing\karing.exe latency -i subscription.txt -o nodes_checked.json --resolve-outbound
          if (Test-Path nodes_checked.json) {
            Write-Output "‚úÖ nodes_checked.json created. Preview first 5 lines:"
            Get-Content nodes_checked.json -TotalCount 5
          } else {
            Write-Output "‚ùå nodes_checked.json not created. Check Karing output"
          }

      # 5Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 6Ô∏è‚É£ Process nodes: assign flag, country code, rename
      - name: Assign flag, country code, rename nodes
        shell: bash
        run: |
          python3 <<'EOF'
          import json

          with open("nodes_checked.json", encoding="utf-8") as f:
              data = json.load(f)

          output_lines = []
          for idx, node in enumerate(data):
              raw = node.get("raw", "").strip()
              ip = node.get("ip", "")
              country_code = node.get("country_code", "XX")
              # Assign flag emoji based on country code
              if len(country_code) == 2:
                  flag = chr(0x1F1E6 + ord(country_code[0].upper()) - 65) + \
                         chr(0x1F1E6 + ord(country_code[1].upper()) - 65)
              else:
                  flag = "üè≥Ô∏è"
              new_name = f"{flag} {country_code}-{idx+1} | @SHFX"
              output_lines.append(f"{raw}#{new_name}")

          with open("nodes_final.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(output_lines))

          print("Processed nodes saved to nodes_final.txt")
          EOF

      # 7Ô∏è‚É£ Commit final output back to GitHub
      - name: Commit & push processed nodes
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add nodes_final.txt
          git commit -m "Update processed nodes [Auto]" || echo "No changes to commit"
          git push
