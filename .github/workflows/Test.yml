name: Fetch & Process Nodes with Sing-Box

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # every 6 hours

jobs:
  process_nodes:
    runs-on: windows-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Install dependencies (Python)
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3Ô∏è‚É£ Download latest Sing-Box Windows release
      - name: Download latest Sing-Box Windows
        run: |
          echo Fetching latest Sing-Box release...
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/SagerNet/sing-box/releases/latest"
          $asset = $release.assets | Where-Object { $_.name -match "windows-amd64.zip" } | Select-Object -First 1
          if (-not $asset) { Write-Error "No windows-amd64.zip found"; exit 1 }
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile sing-box.zip
          Expand-Archive sing-box.zip -DestinationPath sing-box

      # 4Ô∏è‚É£ Download subscription from secret
      - name: Download subscription content
        run: |
          Invoke-WebRequest -Uri "${{ secrets.TEST_URL }}" -OutFile subscription.txt
          Get-Content subscription.txt -TotalCount 5

      # 5Ô∏è‚É£ Run Sing-Box to parse subscription
      - name: Parse subscription with Sing-Box
        run: |
          .\sing-box\sing-box.exe subscribe -u "${{ secrets.TEST_URL }}" -o nodes_checked.json
          if (-Not (Test-Path nodes_checked.json)) { Write-Error "nodes_checked.json not created"; exit 1 }
          Get-Content nodes_checked.json -TotalCount 5

      # 6Ô∏è‚É£ Process nodes in Python
      - name: Process nodes in Python
        shell: pwsh
        run: |
          python <<'EOF'
          import json

          with open("nodes_checked.json", encoding="utf-8") as f:
              data = json.load(f)

          output_lines = []
          for idx, node in enumerate(data):
              raw = node.get("raw", "").strip()
              country_code = node.get("country_code", "XX")
              # Assign flag emoji
              if len(country_code) == 2:
                  flag = chr(0x1F1E6 + ord(country_code[0].upper()) - 65) + \
                         chr(0x1F1E6 + ord(country_code[1].upper()) - 65)
              else:
                  flag = "üè≥Ô∏è"
              new_name = f"{flag} {country_code}-{idx+1} | @SHFX"
              output_lines.append(f"{raw}#{new_name}")

          with open("nodes_final.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(output_lines))

          print("‚úÖ Processed nodes saved to nodes_final.txt")
          EOF

      # 7Ô∏è‚É£ Commit & push processed nodes
      - name: Commit & push processed nodes
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add nodes_final.txt
          git commit -m "Update processed nodes [Auto]" -ErrorAction SilentlyContinue
          git push
