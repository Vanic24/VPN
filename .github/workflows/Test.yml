name: Fetch & Process Nodes with FlClash AppImage

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' # every 6 hours

jobs:
  process_nodes:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y wget unzip jq

      # 3Ô∏è‚É£ Download latest FlClash Linux AMD64 AppImage
      - name: Download latest FlClash AppImage
        run: |
          echo "Fetching latest FlClash release..."
          RELEASE_JSON=$(curl -s https://api.github.com/repos/chen08209/FlClash/releases/latest)
          ASSET_URL=$(echo "$RELEASE_JSON" | jq -r '.assets[] | select(.name | test("linux-amd64\\.AppImage$")) | .browser_download_url' | head -n1)
          if [ -z "$ASSET_URL" ]; then
            echo "‚ùå No Linux AMD64 AppImage found!"
            exit 1
          fi
          echo "Latest FlClash AppImage URL: $ASSET_URL"
          wget -O flclash.AppImage "$ASSET_URL"
          chmod +x flclash.AppImage

      # 4Ô∏è‚É£ Download subscription content from secret
      - name: Download subscription content
        run: |
          echo "Downloading subscription URL from secret..."
          curl -L "${{ secrets.TEST_URL }}" -o subscription.txt
          echo "Preview first 5 lines:"
          head -n5 subscription.txt

      # 5Ô∏è‚É£ Run FlClash CLI to parse subscription
      - name: Parse subscription with FlClash
        run: |
          ./flclash.AppImage parse -f subscription.txt -o nodes_checked.json
          if [ -f nodes_checked.json ]; then
            echo "‚úÖ nodes_checked.json created. Preview first 5 lines:"
            head -n5 nodes_checked.json
          else
            echo "‚ùå nodes_checked.json not created. Check FlClash output."
            exit 1
          fi

      # 6Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 7Ô∏è‚É£ Process nodes in Python
      - name: Process nodes in Python
        run: |
          python3 <<'EOF'
          import json

          with open("nodes_checked.json", encoding="utf-8") as f:
              data = json.load(f)

          output_lines = []
          for idx, node in enumerate(data):
              raw = node.get("raw", "").strip()
              country_code = node.get("country_code", "XX")
              # Assign flag emoji
              if len(country_code) == 2:
                  flag = chr(0x1F1E6 + ord(country_code[0].upper()) - 65) + \
                         chr(0x1F1E6 + ord(country_code[1].upper()) - 65)
              else:
                  flag = "üè≥Ô∏è"
              new_name = f"{flag} {country_code}-{idx+1} | @SHFX"
              output_lines.append(f"{raw}#{new_name}")

          with open("nodes_final.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(output_lines))

          print("‚úÖ Processed nodes saved to nodes_final.txt")
          EOF

      # 8Ô∏è‚É£ Commit & push processed nodes
      - name: Commit & push processed nodes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add nodes_final.txt
          git commit -m "Update processed nodes [Auto]" || echo "No changes to commit"
          git push
