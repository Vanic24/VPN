name: Fetch & Process Nodes

on:
  workflow_dispatch:

jobs:
  process_nodes:
    runs-on: windows-latest
    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Download latest Karing Windows ZIP
      - name: Download latest Karing Windows portable
        run: |
          echo "Fetching latest Karing Windows portable..."
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/KaringX/karing/releases/latest"
          $asset = $release.assets | Where-Object { $_.name -match "windows_x64.zip" } | Select-Object -First 1
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile karing.zip
          Expand-Archive -Path karing.zip -DestinationPath karing -Force
          dir karing
          echo "Karing extracted. Checking version..."
          .\karing\karing.exe --version

      # 3Ô∏è‚É£ Fetch subscription from secret
      - name: Fetch subscription
        shell: bash
        run: |
          curl -s "${{ secrets.TEST_URL }}" -o subscription.txt
          echo "Fetched subscription. Preview first 5 lines:"
          head -n 5 subscription.txt

      - name: Set UTF-8 encoding
        run: |
          chcp 65001
          set PYTHONUTF8=1
        shell: cmd   

      # 4Ô∏è‚É£ Filter out info-only lines automatically
      - name: Filter valid node lines
        shell: bash
        run: |
          python3 <<'EOF'
          import base64

          valid_prefixes = ("vmess://", "vless://", "trojan://", "ss://", "ssr://", "socks5://", "hysteria2://", "anytls://", "tuic://")

          with open("subscription.txt", "r", encoding="utf-8") as f:
              content = f.read().strip()

          lines = []

          # Detect Base64 by trying to decode safely
          try:
              decoded = base64.b64decode(content).decode("utf-8")
              if any(p in decoded for p in valid_prefixes):
                  print("Detected Base64 subscription ‚Üí Decoded successfully.")
                  lines = decoded.splitlines()
              else:
                  print("Subscription not Base64 ‚Üí Using raw lines.")
                  lines = content.splitlines()
          except Exception:
              print("Failed Base64 decode ‚Üí Using raw lines.")
              lines = content.splitlines()

          nodes_raw = [line.strip() for line in lines if line.strip().startswith(valid_prefixes)]

          with open("nodes_raw.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(nodes_raw))

          print(f"Filtered {len(nodes_raw)} valid nodes. Preview first 5:")
          print("\n".join(nodes_raw[:5]))
          EOF

      # 5Ô∏è‚É£ Run Karing latency check with outbound IP resolution
      - name: Karing latency check with outbound IP
        run: |
          echo "Running Karing latency check..."
          .\karing\karing.exe latency -i nodes_raw.txt -o nodes_checked.json --resolve-outbound || echo "Karing failed with exit code $LASTEXITCODE"
          echo "Directory listing after Karing run:"
          dir
          if (Test-Path nodes_checked.json) {
            echo "‚úÖ nodes_checked.json created. Preview first 20 lines:"
            Get-Content nodes_checked.json -TotalCount 20
          } else {
            echo "‚ùå nodes_checked.json not created. Dumping raw Karing output instead:"
            .\karing\karing.exe latency --help
          }

      # 6Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 7Ô∏è‚É£ Process nodes: assign flag, country code, rename
      - name: Assign flag, country code, rename nodes
        shell: bash
        run: |
          python3 <<'EOF'
          import json

          with open("nodes_checked.json", encoding="utf-8") as f:
              data = json.load(f)

          output_lines = []
          for idx, node in enumerate(data):
              raw = node.get("raw", "").strip()
              ip = node.get("ip", "")
              country_code = node.get("country_code", "XX")
              
            # Assign flag emoji based on resolved outbound IP
              if len(country_code) == 2:
                  flag = chr(0x1F1E6 + ord(country_code[0].upper()) - 65) + \
                         chr(0x1F1E6 + ord(country_code[1].upper()) - 65)
              else:
                  flag = "üè≥Ô∏è"
              new_name = f"{flag} {country_code}-{idx+1} | @SHFX"
              output_lines.append(f"{raw}#{new_name}")

          with open("nodes_final.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(output_lines))

          print("Processed nodes saved to nodes_final.txt")
          EOF

      # 8Ô∏è‚É£ Commit final output back to GitHub
      - name: Commit & push processed nodes
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add nodes_final.txt
          git commit -m "Update processed nodes [Auto]" || echo "No changes to commit"
          git push
