name: Fetch & Process Nodes with FlClash

on:
  workflow_dispatch:

jobs:
  process_nodes:
    runs-on: windows-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Download latest FlClash Windows AMD64 ZIP dynamically
      - name: Download latest FlClash
        shell: powershell
        run: |
          Write-Output "Fetching latest FlClash release..."
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/chen08209/FlClash/releases/latest"
          $asset = $release.assets | Where-Object { $_.name -match "windows-amd64\.zip$" } | Select-Object -First 1
          if (-not $asset) {
              Write-Error "No Windows AMD64 ZIP asset found in latest release!"
              exit 1
          }
          $downloadUrl = $asset.browser_download_url
          Write-Output "Latest FlClash Windows AMD64 ZIP URL: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile flclash.zip
          Expand-Archive -Path flclash.zip -DestinationPath flclash -Force
          .\flclash\flclash.exe --version

      # 3Ô∏è‚É£ Fetch subscription URL (FlClash can use it directly)
      - name: Display subscription URL secret
        shell: powershell
        run: |
          Write-Output "Using subscription URL from secret: ${{ secrets.TEST_URL }}"

      # 4Ô∏è‚É£ Run FlClash CLI to parse subscription
      - name: FlClash parse subscription
        shell: powershell
        run: |
          .\flclash\flclash.exe parse -u "${{ secrets.TEST_URL }}" -o nodes_checked.json
          if (Test-Path nodes_checked.json) {
              Write-Output "‚úÖ nodes_checked.json created. Preview first 5 lines:"
              Get-Content nodes_checked.json -TotalCount 5
          } else {
              Write-Output "‚ùå nodes_checked.json not created. Check FlClash output."
              exit 1
          }

      # 5Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 6Ô∏è‚É£ Rename nodes using FlClash output
      - name: Assign flag, country code, rename nodes
        shell: bash
        run: |
          python3 <<'EOF'
          import json

          with open("nodes_checked.json", encoding="utf-8") as f:
              data = json.load(f)

          output_lines = []
          for idx, node in enumerate(data):
              raw = node.get("raw", "").strip()
              country_code = node.get("country_code", "XX")
              # Assign flag emoji
              if len(country_code) == 2:
                  flag = chr(0x1F1E6 + ord(country_code[0].upper()) - 65) + \
                         chr(0x1F1E6 + ord(country_code[1].upper()) - 65)
              else:
                  flag = "üè≥Ô∏è"
              new_name = f"{flag} {country_code}-{idx+1} | @SHFX"
              output_lines.append(f"{raw}#{new_name}")

          with open("nodes_final.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(output_lines))

          print("Processed nodes saved to nodes_final.txt")
          EOF

      # 7Ô∏è‚É£ Commit final output back to GitHub
      - name: Commit & push processed nodes
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add nodes_final.txt
          git commit -m "Update processed nodes [Auto]" || echo "No changes to commit"
          git push
