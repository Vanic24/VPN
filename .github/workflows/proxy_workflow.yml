name: Proxy Configuration Automation

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip tar gzip iputils-ping jq
          pip install pyyaml requests

      # ⬇️ CHANGED STEP (only correction applied)
      - name: Create sources.txt from secret
        run: |
          echo "${{ secrets.SOURCES_TXT }}" > sources.txt
      # ⬆️ No repository checkout anymore, just writes secret content

      - name: Prepare proxy cores
        run: |
          mkdir -p $RUNNER_TEMP/proxy_cores

          # Detect architecture
          ARCH=$(uname -m)
          if [[ "$ARCH" == "x86_64" ]]; then
            V2RAY_ARCH="arm64-v8a"   # v2ray repo only has arm64-v8a
            MIHOMO_ARCH="amd64"
            SINGBOX_ARCH="amd64"
          elif [[ "$ARCH" == "aarch64" ]]; then
            V2RAY_ARCH="arm64-v8a"
            MIHOMO_ARCH="arm64"
            SINGBOX_ARCH="arm64"
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi

          echo "Detected arch: $ARCH"
          echo "Using V2Ray: $V2RAY_ARCH, Mihomo: $MIHOMO_ARCH, Sing-box: $SINGBOX_ARCH"

          # ---------------- V2Ray ----------------
          V2RAY_URL=$(curl -s https://api.github.com/repos/v2fly/v2ray-core/releases/latest \
            | jq -r ".assets[] | select(.name | test(\"v2ray-linux-$V2RAY_ARCH.zip\")) | .browser_download_url")

          if [ -n "$V2RAY_URL" ]; then
            curl -L "$V2RAY_URL" -o $RUNNER_TEMP/proxy_cores/v2ray.zip
            unzip -o $RUNNER_TEMP/proxy_cores/v2ray.zip -d $RUNNER_TEMP/proxy_cores/v2ray || echo "V2Ray unzip failed"
            chmod +x $RUNNER_TEMP/proxy_cores/v2ray/v2ray
          else
            echo "V2Ray download failed"
            exit 1
          fi

          # ---------------- Mihomo ----------------
          MIHOMO_URL=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest \
            | jq -r ".assets[] | select(.name | test(\"mihomo-linux-$MIHOMO_ARCH-v1.*.gz\")) | .browser_download_url" | head -n 1)

          if [ -n "$MIHOMO_URL" ]; then
            curl -L "$MIHOMO_URL" -o $RUNNER_TEMP/proxy_cores/mihomo.gz
            gunzip -f $RUNNER_TEMP/proxy_cores/mihomo.gz
            mv $RUNNER_TEMP/proxy_cores/mihomo $RUNNER_TEMP/proxy_cores/mihomo_bin
            chmod +x $RUNNER_TEMP/proxy_cores/mihomo_bin
          else
            echo "Mihomo download failed"
            exit 1
          fi

          # ---------------- Sing-box ----------------
          SINGBOX_URL=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest \
            | jq -r ".assets[] | select(.name | test(\"sing-box-.*-linux-$SINGBOX_ARCH.tar.gz\")) | .browser_download_url" | head -n 1)

          if [ -n "$SINGBOX_URL" ]; then
            curl -L "$SINGBOX_URL" -o $RUNNER_TEMP/proxy_cores/sing-box.tar.gz
            mkdir -p $RUNNER_TEMP/proxy_cores/sing-box
            tar -xzf $RUNNER_TEMP/proxy_cores/sing-box.tar.gz -C $RUNNER_TEMP/proxy_cores/sing-box --strip-components=1
            chmod +x $RUNNER_TEMP/proxy_cores/sing-box/sing-box
          else
            echo "Sing-box download failed"
            exit 1
          fi

      - name: Run proxy parser
        run: |
          cat > proxy_parser.py << 'EOF'
import os, yaml, requests

def main():
    with open("sources.txt", "r") as f:
        sources = [line.strip() for line in f if line.strip()]
    print("Loaded sources:", sources)

    # Placeholder logic for parsing
    proxies_yaml_block = "- { name: 🇹🇼|TW1|@SHFX, server: tw.akebi.cc, port: 30001, sni: tw1-vds14.anyhk.co, up: null, down: null, skip-cert-verify: true, type: hysteria2, password: demo-password }"
    proxy_names_block = "🇹🇼|TW1|@SHFX"

    with open("ClashTemplate.ini", "r") as f:
        template_text = f.read()

    # ---------------- Replace placeholders ----------------
    output_text = template_text.replace("{{PROXIES}}", proxies_yaml_block)
    output_text = output_text.replace("{{PROXY_NAMES}}", proxy_names_block)

    with open("proxies.yaml", "w") as f:
        f.write(output_text)

if __name__ == "__main__":
    main()
EOF
          python proxy_parser.py

      - name: Commit and push results
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add proxies.yaml
          git commit -m "Update proxies.yaml [skip ci]" || echo "No changes"
          git push
