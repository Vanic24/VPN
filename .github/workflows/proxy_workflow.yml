name: Proxy Configuration Automation

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests pyyaml

      - name: Download SOURCES_TXT repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/SOURCES_TXT
          path: SOURCES_TXT
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare proxy cores
        run: |
          mkdir -p $RUNNER_TEMP/proxy_cores
          ARCH=$(uname -m)
          echo "Detected architecture: $ARCH"

          # ----------- V2Ray -----------
          if [[ "$ARCH" == "x86_64" ]]; then
            V2RAY_URL="https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-64.zip"
          elif [[ "$ARCH" == "aarch64" ]]; then
            V2RAY_URL="https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-arm64-v8a.zip"
          else
            echo "Unsupported architecture for V2Ray: $ARCH"
            exit 1
          fi
          echo "Downloading V2Ray: $V2RAY_URL"
          curl -L "$V2RAY_URL" -o $RUNNER_TEMP/proxy_cores/v2ray.zip
          unzip -o $RUNNER_TEMP/proxy_cores/v2ray.zip -d $RUNNER_TEMP/proxy_cores/ || { echo "V2Ray download failed or invalid ZIP"; exit 1; }
          chmod +x $RUNNER_TEMP/proxy_cores/v2ray

          # ----------- Mihomo -----------
          if [[ "$ARCH" == "x86_64" ]]; then
            MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/latest/download/mihomo-linux-amd64.gz"
          elif [[ "$ARCH" == "aarch64" ]]; then
            MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/latest/download/mihomo-linux-arm64.gz"
          else
            echo "Unsupported architecture for Mihomo: $ARCH"
            exit 1
          fi
          echo "Downloading Mihomo: $MIHOMO_URL"
          curl -L "$MIHOMO_URL" -o $RUNNER_TEMP/proxy_cores/mihomo.gz
          gunzip -f $RUNNER_TEMP/proxy_cores/mihomo.gz || { echo "Mihomo download failed or invalid GZ"; exit 1; }
          chmod +x $RUNNER_TEMP/proxy_cores/mihomo

          # ----------- Sing-box -----------
          if [[ "$ARCH" == "x86_64" ]]; then
            SINGBOX_URL="https://github.com/SagerNet/sing-box/releases/download/v1.12.4/sing-box-1.12.4-linux-amd64.tar.gz"
          elif [[ "$ARCH" == "aarch64" ]]; then
            SINGBOX_URL="https://github.com/SagerNet/sing-box/releases/download/v1.12.4/sing-box-1.12.4-linux-arm64.tar.gz"
          else
            echo "Unsupported architecture for Sing-box: $ARCH"
            exit 1
          fi
          echo "Downloading Sing-box: $SINGBOX_URL"
          curl -L "$SINGBOX_URL" -o $RUNNER_TEMP/proxy_cores/sing-box.tar.gz
          tar -xzf $RUNNER_TEMP/proxy_cores/sing-box.tar.gz -C $RUNNER_TEMP/proxy_cores/ || { echo "Sing-box download failed or invalid TAR"; exit 1; }
          chmod +x $(find $RUNNER_TEMP/proxy_cores -type f -name "sing-box")

      - name: Generate Clash config
        run: |
          python3 <<EOF
import os, yaml

# Load template
with open("ClashTemplate.yaml", "r", encoding="utf-8") as f:
    template_text = f.read()

# Read sources.txt from secret repo
sources_path = os.path.join("SOURCES_TXT", "sources.txt")
with open(sources_path, "r", encoding="utf-8") as f:
    sources = [line.strip() for line in f if line.strip()]

proxies_yaml_block = ""
proxy_names_block = ""

# Example: Just put sources into proxy list
for i, url in enumerate(sources, start=1):
    name = f"Proxy-{i}"
    proxies_yaml_block += f"- name: \"{name}\"\n  type: socks5\n  server: {url}\n  port: 1080\n"
    proxy_names_block += f"  - \"{name}\"\n"

# ---------------- Replace placeholders ----------------
output_text = template_text.replace("{{PROXIES}}", proxies_yaml_block)
output_text = output_text.replace("{{PROXY_NAMES}}", proxy_names_block)

with open("ClashConfig_9PB.yaml", "w", encoding="utf-8") as f:
    f.write(output_text)
EOF

      - name: Commit and push changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "github-actions"
          git add ClashConfig_9PB.yaml
          git commit -m "Auto update Clash YAML Sub at $(date -u +"%Y-%m-%dT%H:%M:%SZ")" || echo "No changes to commit"
          git push
