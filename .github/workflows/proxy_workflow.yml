name: Proxy Configuration Automation

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:

jobs:
  generate_proxies_yaml:
    runs-on: ubuntu-latest
    env:
      CORE_TYPE: "mihomo"  # Change to "v2ray" or "sing-box" as needed
      SECRET_REPO: "YourUsername/SecretRepo"  # Replace with your secret repo
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOWNLOAD_DIR: "$RUNNER_TEMP/proxy_cores"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq bc unzip tar netcat-openbsd uuid-runtime

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Fetch sources.txt from secret repository
        run: |
          curl -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            -o scripts/sources.txt \
            https://api.github.com/repos/$SECRET_REPO/contents/sources.txt

- name: Download and Extract Proxy Cores
  run: |
    # Fetch the latest release versions
    MIHOMO_VERSION=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r .tag_name)
    V2RAY_VERSION=$(curl -s https://api.github.com/repos/v2fly/v2ray-core/releases/latest | jq -r .tag_name)
    SINGBOX_VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r .tag_name)

    # Determine architecture
    ARCH=$(uname -m)

    # Construct download URLs
    if [[ "$ARCH" == "x86_64" ]]; then
      MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_VERSION}/mihomo-linux-amd64-${MIHOMO_VERSION}.gz"
      V2RAY_URL="https://github.com/v2fly/v2ray-core/releases/download/${V2RAY_VERSION}/v2ray-linux-64.zip"
      SINGBOX_URL="https://github.com/SagerNet/sing-box/releases/download/${SINGBOX_VERSION}/sing-box-linux-amd64-${SINGBOX_VERSION}.tar.gz"
    elif [[ "$ARCH" == "aarch64" ]]; then
      MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_VERSION}/mihomo-linux-arm64-${MIHOMO_VERSION}.gz"
      V2RAY_URL="https://github.com/v2fly/v2ray-core/releases/download/${V2RAY_VERSION}/v2ray-linux-arm64-v8a.zip"
      SINGBOX_URL="https://github.com/SagerNet/sing-box/releases/download/${SINGBOX_VERSION}/sing-box-linux-arm64-${SINGBOX_VERSION}.tar.gz"
    else
      echo "Unsupported architecture: $ARCH"
      exit 1
    fi

    # Download and extract Mihomo
    curl -L "$MIHOMO_URL" -o mihomo.gz
    if gzip -t mihomo.gz; then
      gzip -d mihomo.gz
      chmod +x mihomo
    else
      echo "Mihomo download failed or is not a valid GZ file."
      exit 1
    fi

    # Download and extract v2ray-core
    curl -L "$V2RAY_URL" -o v2ray.zip
    if unzip -tq v2ray.zip; then
      unzip -o v2ray.zip
      chmod +x v2ray
    else
      echo "v2ray-core download failed or is not a valid ZIP file."
      exit 1
    fi

    # Download and extract sing-box
    curl -L "$SINGBOX_URL" -o sing-box.tar.gz
    if tar -tzf sing-box.tar.gz > /dev/null; then
      tar -xzf sing-box.tar.gz
      chmod +x sing-box
    else
      echo "sing-box download failed or is not a valid TAR file."
      exit 1
    fi

      - name: Parse and validate proxies
        run: scripts/parse_and_validate_proxies.sh

      - name: Test proxy connectivity
        run: scripts/test_proxy_connectivity.sh

      - name: Determine outlet IPs
        run: |
          CORE_BIN=""
          if [ "$CORE_TYPE" == "v2ray" ]; then CORE_BIN="$DOWNLOAD_DIR/v2ray/v2ray"; fi
          if [ "$CORE_TYPE" == "mihomo" ]; then CORE_BIN="$DOWNLOAD_DIR/mihomo"; fi
          if [ "$CORE_TYPE" == "sing-box" ]; then CORE_BIN="$DOWNLOAD_DIR/sing-box"; fi
          export CORE_BIN
          scripts/determine_outlet_ips.sh

      - name: Format proxies into JSON
        run: scripts/format_proxies.sh

      - name: Generate proxies.yaml for Clash
        run: scripts/generate_proxies_yaml.sh

      - name: Commit and push proxies.yaml
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add proxies.yaml
          git commit -m "Update proxies.yaml"
          git push
