name: Proxy Configuration Automation

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Detect architecture
        id: arch
        run: |
          ARCH=$(uname -m)
          if [[ "$ARCH" == "x86_64" ]]; then
            echo "ARCH=amd64" >> $GITHUB_ENV
          elif [[ "$ARCH" == "aarch64" ]]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi

      - name: Prepare proxy cores
        run: |
          mkdir -p $RUNNER_TEMP/proxy_cores
          cd $RUNNER_TEMP/proxy_cores

          # ---------------- Download V2Ray ----------------
          if [[ "${ARCH}" == "amd64" ]]; then
            V2RAY_URL="https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-64.zip"
          else
            V2RAY_URL="https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-arm64-v8a.zip"
          fi
          echo "Downloading V2Ray: $V2RAY_URL"
          curl -L -o v2ray.zip "$V2RAY_URL" || { echo "V2Ray download failed"; exit 1; }
          unzip -o v2ray.zip || { echo "V2Ray unzip failed"; exit 1; }

          # ---------------- Download Mihomo ----------------
          if [[ "${ARCH}" == "amd64" ]]; then
            MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/latest/download/mihomo-linux-amd64.tar.gz"
          else
            MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/latest/download/mihomo-linux-arm64.tar.gz"
          fi
          echo "Downloading Mihomo: $MIHOMO_URL"
          curl -L -o mihomo.tar.gz "$MIHOMO_URL" || { echo "Mihomo download failed"; exit 1; }
          tar -xvzf mihomo.tar.gz || { echo "Mihomo extraction failed"; exit 1; }

          # ---------------- Download Sing-box ----------------
          if [[ "${ARCH}" == "amd64" ]]; then
            SINGBOX_URL="https://github.com/SagerNet/sing-box/releases/download/v1.12.4/sing-box-1.12.4-linux-amd64.tar.gz"
          else
            SINGBOX_URL="https://github.com/SagerNet/sing-box/releases/download/v1.12.4/sing-box-1.12.4-linux-arm64.tar.gz"
          fi
          echo "Downloading Sing-box: $SINGBOX_URL"
          curl -L -o sing-box.tar.gz "$SINGBOX_URL" || { echo "Sing-box download failed"; exit 1; }
          tar -xvzf sing-box.tar.gz || { echo "Sing-box extraction failed"; exit 1; }

          chmod +x v2ray mihomo sing-box || true

      - name: Load SOURCES_TXT repo
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.SOURCES_TXT }}
          path: sources_repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Python script
        run: |
          pip install pyyaml requests
          python3 <<'EOF'
import os, yaml, requests

# ---------------- Config ----------------
SOURCES_FILE = "sources_repo/sources.txt"
TEMPLATE_FILE = "ClashTemplate.yaml"
OUTPUT_FILE = "Clash.yaml"

# ---------------- Load sources ----------------
with open(SOURCES_FILE, "r") as f:
    sources = [line.strip() for line in f if line.strip()]

# ---------------- Process proxies ----------------
proxies = []
proxy_names = []

for src in sources:
    try:
        if src.startswith("http"):
            resp = requests.get(src, timeout=10)
            resp.raise_for_status()
            data = yaml.safe_load(resp.text)
            if "proxies" in data:
                proxies.extend(data["proxies"])
                proxy_names.extend([p["name"] for p in data["proxies"]])
    except Exception as e:
        print(f"Failed to load {src}: {e}")

proxies_yaml_block = yaml.dump(proxies, allow_unicode=True)
proxy_names_block = yaml.dump(proxy_names, allow_unicode=True)

# ---------------- Replace placeholders ----------------
with open(TEMPLATE_FILE, "r") as f:
    template_text = f.read()

output_text = template_text.replace("{{PROXIES}}", proxies_yaml_block)
output_text = output_text.replace("{{PROXY_NAMES}}", proxy_names_block)

with open(OUTPUT_FILE, "w") as f:
    f.write(output_text)

print("âœ… Clash.yaml generated successfully")
EOF

      - name: Commit and push
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add Clash.yaml
          git commit -m "Auto update Clash config at $(date -u +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push
