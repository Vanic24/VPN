name: Update VPN Subscription (Clash YAML + Dry Run + Artifact + Logs)

on:
  schedule:
    - cron: "0 */4 * * *"  # Runs every 4 hours
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'If true, only generate YAML locally without pushing'
        required: false
        default: 'false'

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20"

    - name: Install dependencies
      run: npm install axios js-yaml

    - name: Run update script
      id: generate_yaml
      run: |
        node <<'EOF'
        const axios = require('axios');
        const yaml = require('js-yaml');
        const fs = require('fs');
        const { URL } = require('url');
        const path = require('path');

        const SUB_URL = process.env.SUB_URL;
        const GH_TOKEN = process.env.GH_TOKEN;
        const GITHUB_FILE = "9PB";
        const IGDUX_EDIT_URL = process.env.IGDUX_EDIT_URL;
        const dryRun = process.env.DRY_RUN === "true";

        function b64decode(s) {
          if (s.length % 4) s += "=".repeat(4 - (s.length % 4));
          return Buffer.from(s, 'base64').toString('utf8');
        }

        function parseVmess(link) {
          try {
            const conf = JSON.parse(b64decode(link.slice(8)));
            const net = (conf.net || "tcp").toLowerCase();
            const tls = (conf.tls || "").toLowerCase() === "tls";
            const proxy = {
              name: conf.ps || "vmess",
              type: "vmess",
              server: conf.add,
              port: Number(conf.port),
              uuid: conf.id,
              alterId: Number(conf.aid || 0),
              cipher: conf.type || "auto",
              tls,
              network: net,
            };
            if (net === "ws") proxy["ws-opts"] = { path: conf.path || "", headers: { Host: conf.host || "" } };
            if (net === "grpc") proxy["grpc-opts"] = { "grpc-service-name": conf.path || "" };
            if (conf.sni) proxy.servername = conf.sni;
            return proxy;
          } catch { return null; }
        }

        function parseVless(link) {
          try {
            const u = new URL(link);
            const q = Object.fromEntries(u.searchParams.entries());
            const net = (q.type || q.transport || "tcp").toLowerCase();
            const tls = (q.security || "").toLowerCase() === "tls";
            const proxy = {
              name: decodeURIComponent(u.hash.slice(1)) || "vless",
              type: "vless",
              server: u.hostname,
              port: Number(u.port || 443),
              uuid: decodeURIComponent(u.username),
              tls,
              network: net
            };
            if (net === "ws") proxy["ws-opts"] = { path: q.path || "", headers: { Host: q.host || "" } };
            if (net === "grpc") proxy["grpc-opts"] = { "grpc-service-name": q.serviceName || q["service-name"] || "" };
            return proxy;
          } catch { return null; }
        }

        function parseTrojan(link) {
          try {
            const u = new URL(link);
            const q = Object.fromEntries(u.searchParams.entries());
            const net = (q.type || q.transport || "tcp").toLowerCase();
            const tls = (q.security || "").toLowerCase() === "tls";
            const proxy = {
              name: decodeURIComponent(u.hash.slice(1)) || "trojan",
              type: "trojan",
              server: u.hostname,
              port: Number(u.port || 443),
              password: decodeURIComponent(u.username),
              tls,
              network: net
            };
            if (net === "ws") proxy["ws-opts"] = { path: q.path || "", headers: { Host: q.host || "" } };
            if (net === "grpc") proxy["grpc-opts"] = { "grpc-service-name": q.serviceName || q["service-name"] || "" };
            return proxy;
          } catch { return null; }
        }

        async function main() {
          try {
            const res = await axios.get(SUB_URL, { responseType: 'text' });
            let lines = b64decode(res.data.trim()).split(/\r?\n/).slice(2).filter(Boolean);

            const proxies = [];
            for (const line of lines) {
              if (line.startsWith("vmess://")) proxies.push(parseVmess(line));
              else if (line.startsWith("vless://")) proxies.push(parseVless(line));
              else if (line.startsWith("trojan://")) proxies.push(parseTrojan(line));
            }

            console.log(`üîπ Total proxies parsed: ${proxies.length}`);

            const clashConfig = {
              proxies,
              "proxy-groups": [
                {
                  name: "Auto",
                  type: "url-test",
                  proxies: proxies.map(p => p.name),
                  url: "http://www.gstatic.com/generate_204",
                  interval: 300
                }
              ],
              rules: ["MATCH,Auto"]
            };

            const yamlData = yaml.dump(clashConfig, { noRefs: true, forceQuotes: false, lineWidth: 120 });
            fs.writeFileSync(GITHUB_FILE, yamlData, "utf8");

            const artifactFile = path.join(process.cwd(), `9PB.yml`);
            fs.writeFileSync(artifactFile, yamlData, "utf8");
            console.log("‚úÖ YAML generated successfully");

            if (!dryRun) {
              try {
                // GitHub update
                const fileInfo = await axios.get(
                  `https://api.github.com/repos/Vanic24/VPN/contents/${GITHUB_FILE}`,
                  { headers: { Authorization: `token ${GH_TOKEN}` } }
                );
                console.log("GitHub file SHA:", fileInfo.data.sha);

                const putRes = await axios.put(
                  `https://api.github.com/repos/Vanic24/VPN/contents/${GITHUB_FILE}`,
                  {
                    message: "Auto update Clash YAML",
                    content: Buffer.from(yamlData).toString('base64'),
                    sha: fileInfo.data.sha
                  },
                  { headers: { Authorization: `token ${GH_TOKEN}` } }
                );
                console.log("GitHub PUT response status:", putRes.status);
                console.log("GitHub PUT response data:", putRes.data);

                // igdux update
                const igduxRes = await axios.post(IGDUX_EDIT_URL, yamlData, { headers: { 'Content-Type': 'text/plain' } });
                console.log("igdux POST response status:", igduxRes.status);
                console.log("igdux POST response data:", igduxRes.data);

              } catch (e) {
                console.error("‚ö†Ô∏è Warning: Failed to update GitHub or igdux:", e.message);
              }
            } else {
              console.log("‚ö†Ô∏è Dry run enabled ‚Äî YAML generated but not pushed.");
            }

          } catch (e) {
            console.error("‚ùå Error during processing:", e.message);
            process.exit(1);
          }
        }

        main();
        EOF

      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        SUB_URL: ${{ secrets.SUB_URL }}
        IGDUX_EDIT_URL: ${{ secrets.IGDUX_EDIT_URL }}
        DRY_RUN: ${{ github.event.inputs.dry_run }}

    - name: Upload Clash YAML artifact
      uses: actions/upload-artifact@v4
      with:
        name: 9PB
        path: 9PB.yml
