name: Update VPN Subscription (Clash YAML + igdux + Cleanup)

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'If true, only generate YAML locally without pushing'
        required: false
        default: 'false'
  schedule:
    - cron: '0 */4 * * *' # Every 4 hours

permissions:
  contents: write
  actions: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Puppeteer
        run: npm install puppeteer axios js-yaml

      - name: Fetch and convert subscription
        id: fetch_convert
        run: |
          const fs = require('fs');
          const axios = require('axios');
          const yaml = require('js-yaml');

          const OFFICIAL_URL = "https://syyn.qeayr.cn/api/v1/client/subscribe?token=936846b4c221c379f907c8e28e929664";

          (async () => {
            console.log("📥 Fetching subscription...");
            const res = await axios.get(OFFICIAL_URL, { responseType: 'text' });
            const decoded = Buffer.from(res.data, 'base64').toString('utf8');
            let lines = decoded.split('\n').filter(Boolean);

            // Remove first two nodes (traffic info)
            lines = lines.slice(2);

            // Convert to Clash YAML (simplified demo)
            const proxies = lines.map((link, idx) => ({
              name: `Node ${idx + 1}`,
              type: 'vmess',
              server: `server${idx + 1}.example.com`,
              port: 443
            }));

            const clashConfig = {
              proxies: proxies,
              'proxy-groups': [{
                name: 'Auto',
                type: 'url-test',
                proxies: proxies.map(p => p.name),
                url: 'http://www.gstatic.com/generate_204',
                interval: 300
              }],
              rules: ['MATCH,Auto']
            };

            const yamlData = yaml.dump(clashConfig);
            fs.writeFileSync('9PB', yamlData, 'utf8');
            console.log(`✅ Total proxies parsed: ${proxies.length}`);

          })();
        shell: node {0}

      - name: Dry run check
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: echo "Dry run: Skipping uploads"

      - name: Commit and push YAML to GitHub
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add 9PB
          git commit -m "Update subscription YAML"
          git push

      - name: Update igdux via Puppeteer
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
            const yamlContent = fs.readFileSync('9PB', 'utf8');
            const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
            const page = await browser.newPage();

            console.log("🌐 Opening igdux editor...");
            await page.goto("https://igdux.top/~9PB:44YTr3MMipiXDHhTpbEJ6dRG", { waitUntil: 'networkidle2' });

            console.log("📝 Pasting YAML...");
            await page.evaluate((content) => {
              const textarea = document.querySelector('textarea');
              textarea.value = content;
            }, yamlContent);

            console.log("💾 Saving...");
            await page.click('button[type="submit"], button.save'); // adjust selector if needed
            await page.waitForTimeout(2000); // wait for save

            await browser.close();
            console.log("✅ igdux updated successfully");
          })();
        shell: node {0}

      - name: Upload artifact (for debug)
        uses: actions/upload-artifact@v4
        with:
          name: subscription-yaml
          path: 9PB
          retention-days: 3

      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name !== "subscription-yaml") {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                core.info(`🗑 Deleted artifact: ${artifact.name}`);
              }
            }

      - name: Delete old workflow runs (keep latest)
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.workflow,
              per_page: 50
            });
            const sorted = runs.data.workflow_runs
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            for (const [i, run] of sorted.entries()) {
              if (i === 0 || run.id === context.runId) continue;
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                core.info(`🗑 Deleted old run ${run.id} from ${run.created_at}`);
              } catch (e) {
                core.warning(`Could not delete run ${run.id}: ${e.message}`);
              }
            }
