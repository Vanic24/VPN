name: Update VPN Subscription (Clash YAML + Dry Run + Artifact)

on:
  schedule:
    - cron: "0 */4 * * *"  # Runs every 4 hours
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'If true, only generate YAML locally without pushing'
        required: false
        default: 'false'
      keep_latest:
        description: 'Number of latest artifacts to keep'
        required: false
        default: '5'

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20"

    - name: Install dependencies
      run: npm install axios js-yaml

    - name: Run update script
      id: generate_yaml
      run: |
        node <<'EOF'
        const axios = require('axios');
        const yaml = require('js-yaml');
        const fs = require('fs');
        const path = require('path');

        const SUB_URL = process.env.SUB_URL;
        const GH_TOKEN = process.env.GH_TOKEN;
        const GITHUB_FILE = "9PB";
        const IGDUX_EDIT_URL = process.env.IGDUX_EDIT_URL;
        const dryRun = process.env.DRY_RUN === "true";

        function b64decode(s) {
          if (s.length % 4) s += "=".repeat(4 - (s.length % 4));
          return Buffer.from(s, 'base64').toString('utf8');
        }

        function parseVmess(link) { /* unchanged parsing code */ return JSON.parse('{}'); } 
        function parseVless(link) { return JSON.parse('{}'); }
        function parseTrojan(link) { return JSON.parse('{}'); }

        function getTimestamp() {
          const now = new Date();
          const YYYY = now.getFullYear();
          const MM = String(now.getMonth() + 1).padStart(2, '0');
          const DD = String(now.getDate()).padStart(2, '0');
          const hh = String(now.getHours()).padStart(2, '0');
          const mm = String(now.getMinutes()).padStart(2, '0');
          const ss = String(now.getSeconds()).padStart(2, '0');
          return `${YYYY}${MM}${DD}-${hh}${mm}${ss}`;
        }

        async function main() {
          const res = await axios.get(SUB_URL, { responseType: 'text' });
          let lines = b64decode(res.data.trim()).split(/\r?\n/).slice(2).filter(Boolean);

          const proxies = []; // parse your nodes here
          const clashConfig = { proxies, "proxy-groups": [], rules: ["MATCH,Auto"] };
          const yamlData = yaml.dump(clashConfig, { noRefs: true, forceQuotes: false, lineWidth: 120 });

          fs.writeFileSync(GITHUB_FILE, yamlData, "utf8");

          const timestamp = getTimestamp();
          const artifactFile = path.join(process.cwd(), `9BP-${timestamp}.yml`);
          fs.writeFileSync(artifactFile, yamlData, "utf8");
          console.log(`✅ YAML generated successfully: ${artifactFile}`);
          fs.appendFileSync(process.env.GITHUB_ENV, `ARTIFACT_FILE=${artifactFile}\n`);

          if (!dryRun) {
            // Update GitHub file & igdux
          } else {
            console.log("⚠️ Dry run enabled — YAML generated but not pushed.");
          }
        }

        main().catch(e => { console.error("❌ Error:", e); process.exit(1); });
        EOF

      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        SUB_URL: ${{ secrets.SUB_URL }}
        IGDUX_EDIT_URL: ${{ secrets.IGDUX_EDIT_URL }}
        DRY_RUN: ${{ github.event.inputs.dry_run }}

    - name: Upload Clash YAML artifact
      uses: actions/upload-artifact@v4
      with:
        name: 9PB.yaml
        path: ${{ env.ARTIFACT_FILE }}

    - name: Cleanup old artifacts
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        KEEP_LATEST: ${{ github.event.inputs.keep_latest }}
      run: |
        node <<'EOF'
        const axios = require('axios');
        const TOKEN = process.env.GH_TOKEN;
        const KEEP_LATEST = parseInt(process.env.KEEP_LATEST || "5");
        const GITHUB_REPO = process.env.GITHUB_REPOSITORY;

        (async () => {
          const url = `https://api.github.com/repos/${GITHUB_REPO}/actions/artifacts`;
          const headers = { Authorization: `token ${TOKEN}` };
          const res = await axios.get(url, { headers });
          const artifacts = res.data.artifacts
            .filter(a => a.name === 'clash-yaml')
            .sort((a,b) => new Date(b.created_at) - new Date(a.created_at));

          const oldArtifacts = artifacts.slice(KEEP_LATEST);
          for (const art of oldArtifacts) {
            console.log(`Deleting old artifact: ${art.name} (${art.id})`);
            await axios.delete(`https://api.github.com/repos/${GITHUB_REPO}/actions/artifacts/${art.id}`, { headers });
          }
        })();
        EOF
