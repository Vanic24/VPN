name: Update VPN Subscription (Clash YAML + Dry Run + Artifact)

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'If true, only generate YAML locally without pushing'
        required: false
        default: 'false'
  schedule:
    - cron: '0 */6 * * *' # Runs every 6 hours

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install axios js-base64 yaml

      - name: Fetch, convert, and update
        run: |
          node <<'EOF'
          const axios = require('axios');
          const { Base64 } = require('js-base64');
          const yaml = require('yaml');

          const GH_TOKEN = process.env.GH_TOKEN;
          const SUB_URL = process.env.SUB_URL;
          const IGDUX_EDIT_URL = process.env.IGDUX_EDIT_URL;
          const GITHUB_FILE = "9PB";
          const dryRun = process.env.DRY_RUN === "true";

          function parseVmess(url) {
            try {
              const decoded = JSON.parse(Base64.decode(url.replace("vmess://", "")));
              return {
                name: decoded.ps || "Unnamed",
                type: "vmess",
                server: decoded.add,
                port: Number(decoded.port),
                uuid: decoded.id,
                alterId: Number(decoded.aid || 0),
                cipher: "auto",
                tls: decoded.tls === "tls",
                network: decoded.net || "tcp"
              };
            } catch {
              return null;
            }
          }

          function parseVless(url) {
            try {
              const [idPart, hostPart] = url.replace("vless://", "").split("@");
              const [host, params] = hostPart.split("?");
              const [server, port] = host.split(":");
              return {
                name: idPart.split("#")[1] || "Unnamed",
                type: "vless",
                server,
                port: Number(port),
                uuid: idPart.split("#")[0],
                tls: params.includes("security=tls")
              };
            } catch {
              return null;
            }
          }

          function parseTrojan(url) {
            try {
              const [passPart, hostPart] = url.replace("trojan://", "").split("@");
              const [server, params] = hostPart.split("?");
              const [hostname, port] = server.split(":");
              return {
                name: passPart.split("#")[1] || "Unnamed",
                type: "trojan",
                server: hostname,
                port: Number(port),
                password: passPart.split("#")[0],
                sni: params.match(/sni=([^&]+)/)?.[1] || ""
              };
            } catch {
              return null;
            }
          }

          (async () => {
            try {
              console.log("üì• Fetching subscription...");
              const res = await axios.get(SUB_URL);
              let lines = Base64.decode(res.data).split("\n").map(l => l.trim()).filter(Boolean);

              // Remove first 2 nodes (traffic info / Chinese nodes)
              lines = lines.slice(2);

              const proxies = [];
              for (const line of lines) {
                if (line.startsWith("vmess://")) proxies.push(parseVmess(line));
                else if (line.startsWith("vless://")) proxies.push(parseVless(line));
                else if (line.startsWith("trojan://")) proxies.push(parseTrojan(line));
              }

              console.log(`üîπ Total proxies parsed: ${proxies.length}`);

              const clashConfig = {
                proxies: proxies.filter(Boolean),
                'proxy-groups': [],
                rules: []
              };

              const yamlData = yaml.stringify(clashConfig);
              require('fs').writeFileSync("9PB", yamlData);

              if (!dryRun) {
                try {
                  console.log("üì§ Updating GitHub...");
                  const fileInfo = await axios.get(
                    `https://api.github.com/repos/Vanic24/VPN/contents/${GITHUB_FILE}`,
                    { headers: { Authorization: `token ${GH_TOKEN}` } }
                  );
                  await axios.put(
                    `https://api.github.com/repos/Vanic24/VPN/contents/${GITHUB_FILE}`,
                    {
                      message: "Auto update Clash YAML",
                      content: Buffer.from(yamlData).toString('base64'),
                      sha: fileInfo.data.sha
                    },
                    { headers: { Authorization: `token ${GH_TOKEN}` } }
                  );
                  console.log("‚úÖ GitHub updated successfully");
                } catch (e) {
                  console.error("‚ö†Ô∏è Warning: Failed to update GitHub:", e.message);
                }

                try {
                  console.log("üì§ Updating igdux...");
                  await axios.put(IGDUX_EDIT_URL, yamlData, {
                    headers: { 'Content-Type': 'text/plain' }
                  });
                  console.log("‚úÖ igdux updated successfully");
                } catch (e) {
                  console.error("‚ö†Ô∏è Warning: Failed to update igdux:", e.message);
                }
              } else {
                console.log("‚ö†Ô∏è Dry run enabled ‚Äî YAML generated but not pushed.");
              }
            } catch (err) {
              console.error("‚ùå Error:", err.message);
              process.exit(1);
            }
          })();
          EOF
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SUB_URL: ${{ secrets.SUB_URL }}
          IGDUX_EDIT_URL: ${{ secrets.IGDUX_EDIT_URL }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}

      - name: Upload Clash YAML artifact
        uses: actions/upload-artifact@v4
        with:
          name: 9PB
          path: 9PB
          retention-days: 1

      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === "9PB" && artifact.expired === false && artifact.id !== artifacts.data.artifacts[0].id) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`üóë Deleted old artifact: ${artifact.name} (ID: ${artifact.id})`);
              }
            }
